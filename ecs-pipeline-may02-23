pipeline {
    agent any

    environment {
        AWS_DEFAULT_REGION = "us-east-1"
        ECS_CLUSTER = "ecs-cluster"
        ECS_SERVICE = "ecs-service1"
		REPO = "343755987196.dkr.ecr.us-east-1.amazonaws.com"
		AWS_ECS_TASK_DEFINITION = "ecs-task1"
	    TASK_FAMILY = "ecs-task1"
	    AWS_ECS_EXECUTION_ROL = "ecsTaskExecutionRole"
	//	taskRevision = "1"
    	DESIRED_COUNT = "1"
    	ECR_REPO_NAME = "ecsproject"
   
    //	NEW_ECR_IMAGE = "343755987196.dkr.ecr.us-east-1.amazonaws.com/ecsproject:latest-33"
    
    }

    stages {
        stage('Checkout') {
            steps {
               // git 'https://github.com/ssgrandhi/ecs-nginx-docker.git'
				git branch: 'main', credentialsId: 'git', url: 'https://github.com/ssgrandhi/ecs-nginx-docker.git'
            }
       }
        stage('Build') {
           steps {
                sh 'docker build -t nginx .'
            }
       }
        stage('Push to ECR') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'my-credentials', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                   // sh 'eval $(aws ecr get-login --no-include-email --region ${AWS_DEFAULT_REGION})'
                    sh 'aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 343755987196.dkr.ecr.us-east-1.amazonaws.com/eksproject'
                    sh 'docker tag nginx:latest ${REPO}/ecsproject:latest-$BUILD_NUMBER'
                    sh 'docker push ${REPO}/ecsproject:latest-$BUILD_NUMBER'
					
		            //NEW_ECR_IMAGE=${ECR_REPO_URL}
                }
            }
        }   
        stage('GET to ECR Latest IMAGE') {
            steps {
                 withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'my-credentials', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
             script {
               def ecrRepoUri = sh (
                 script: "aws ecr describe-repositories --repository-name ${ECR_REPO_NAME} --region ${AWS_DEFAULT_REGION} --query 'repositories[0].repositoryUri' --output text",
                  returnStdout: true
                  ).trim()
               echo "${ecrRepoUri}" 
               def imageTags = sh (
                        script: "aws ecr describe-images --repository-name ${ECR_REPO_NAME} --region ${AWS_DEFAULT_REGION} --query 'imageDetails[*].imageTags[0]' --output json | jq -r '.[-1]'  ",
                        returnStdout: true
                    ).trim()
                     
                    env.tmp = imageTags
   // echo "${env.tmp}"
             
           env.NEW_ECR_IMAGE = "${ecrRepoUri}:${env.tmp}"
            echo "${env.NEW_ECR_IMAGE}"
             } 
        }    
    }
}    
    stage('Deploy to ECS') {
            steps {
                script {
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'my-credentials', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                    sh 'aws ecs describe-task-definition --task-definition ecs-task1 | jq \'.taskDefinition | .containerDefinitions[0].image=env.NEW_ECR_IMAGE | del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.requiresAttributes) | del(.compatibilities) | del(.registeredAt) | del(.registeredBy)\' > task5.json'
         sh 'aws ecs register-task-definition --family ecs-task1 --cli-input-json file://task5.json'  
       //  sh "aws ecs update-service --cluster ${ECS_CLUSTER} --service ${ECS_SERVICE} --force-new-deployment --task-definition ${AWS_ECS_TASK_DEFINITION} --desired-count ${DESIRED_COUNT} --region ${AWS_DEFAULT_REGION}"
                    }
                }
            } 
       } 
    }
  }

